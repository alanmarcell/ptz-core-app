{"version":3,"sources":["../dist-esnext/BaseRepositoryFake.test.js"],"names":["BaseRepositoryFake","collectionName","db","repository","describe","beforeEach","createRepository","it","entity","name","save","entities","id","dbEntity","getById","entity1","entity2","dbEntities","getByIds","length","find","limit","dbCollectionName","getDbCollection"],"mappings":";;AAAA;;AACA;;IAAYA,kB;;;;AACZ,IAAMC,iBAAiB,MAAvB;AACA,IAAMC,KAAK,QAAX;AACA,IAAIC,mBAAJ;AACAC,SAAS,oBAAT,EAA+B,YAAM;AACjCC,eAAW,EAAX,EAAe,YAAM;AACjBF,qBAAaH,mBAAmBM,gBAAnB,CAAoCL,cAApC,EAAoDC,EAApD,CAAb;AACH,KAFD;AAGAK,OAAG,2BAAH,EAAgC,YAAM;AAClC,8BAAMJ,WAAWF,cAAjB,EAAiCA,cAAjC,EAAiD,uBAAjD;AACA,8BAAME,WAAWD,EAAjB,EAAqBA,EAArB,EAAyB,UAAzB;AACH,KAHD;AAIAK,OAAG,MAAH,EAAW,YAAM;AACb,YAAMC,SAAS;AACXC,kBAAM;AADK,SAAf;AAGAN,mBAAWO,IAAX,CAAgBF,MAAhB;AACA,8BAAMR,mBAAmBW,QAAnB,CAA4B,CAA5B,CAAN,EAAsCH,MAAtC;AACH,KAND;AAOAD,OAAG,SAAH,EAAc,kBAAY;AACtB,YAAMC,SAAS;AACXI,gBAAI,QADO;AAEXH,kBAAM;AAFK,SAAf;AAIAN,mBAAWO,IAAX,CAAgBF,MAAhB;AACA,YAAMK,WAAW,MAAMV,WAAWW,OAAX,CAAmBN,OAAOI,EAA1B,CAAvB;AACA,8BAAMC,QAAN,EAAgBL,MAAhB;AACH,KARD;AASAD,OAAG,UAAH,EAAe,kBAAY;AACvB,YAAMQ,UAAU;AACZH,gBAAI,QADQ;AAEZH,kBAAM;AAFM,SAAhB;AAIAN,mBAAWO,IAAX,CAAgBK,OAAhB;AACA,YAAMC,UAAU;AACZJ,gBAAI,SADQ;AAEZH,kBAAM;AAFM,SAAhB;AAIAN,mBAAWO,IAAX,CAAgBM,OAAhB;AACA,YAAMC,aAAa,MAAMd,WAAWe,QAAX,CAAoB,CAACH,QAAQH,EAAT,EAAaI,QAAQJ,EAArB,CAApB,CAAzB;AACA,8BAAMK,WAAWE,MAAjB,EAAyB,CAAzB;AACH,KAbD;AAcAZ,OAAG,MAAH,EAAW,kBAAY;AACnB,YAAMQ,UAAU;AACZH,gBAAI,QADQ;AAEZH,kBAAM;AAFM,SAAhB;AAIAN,mBAAWO,IAAX,CAAgBK,OAAhB;AACA,YAAMC,UAAU;AACZJ,gBAAI,SADQ;AAEZH,kBAAM;AAFM,SAAhB;AAIAN,mBAAWO,IAAX,CAAgBM,OAAhB;AACA,YAAMC,aAAa,MAAMd,WAAWiB,IAAX,CAAgB,EAAhB,EAAoB,EAAEC,OAAO,CAAT,EAApB,CAAzB;AACA,8BAAMJ,WAAWE,MAAjB,EAAyB,CAAzB;AACH,KAbD;AAcAZ,OAAG,iBAAH,EAAsB,YAAM;AACxB,YAAMe,mBAAmBtB,mBAAmBuB,eAAnB,EAAzB;AACA,8BAAMD,iBAAiBrB,cAAvB,EAAuCA,cAAvC;AACH,KAHD;AAIH,CAxDD;AAyDA","file":"BaseRepositoryFake.test.js","sourcesContent":["import { equal } from 'ptz-assert';\nimport * as BaseRepositoryFake from './index';\nconst collectionName = 'test';\nconst db = 'fakeDb';\nlet repository;\ndescribe('BaseRepositoryFake', () => {\n    beforeEach('', () => {\n        repository = BaseRepositoryFake.createRepository(collectionName, db);\n    });\n    it('set collectionName and db', () => {\n        equal(repository.collectionName, collectionName, 'wrong collectionsName');\n        equal(repository.db, db, 'wrong db');\n    });\n    it('save', () => {\n        const entity = {\n            name: 'entity'\n        };\n        repository.save(entity);\n        equal(BaseRepositoryFake.entities[0], entity);\n    });\n    it('getById', async () => {\n        const entity = {\n            id: 'testid',\n            name: 'entity'\n        };\n        repository.save(entity);\n        const dbEntity = await repository.getById(entity.id);\n        equal(dbEntity, entity);\n    });\n    it('getByIds', async () => {\n        const entity1 = {\n            id: 'testid',\n            name: 'entity1'\n        };\n        repository.save(entity1);\n        const entity2 = {\n            id: 'testid1',\n            name: 'entity2'\n        };\n        repository.save(entity2);\n        const dbEntities = await repository.getByIds([entity1.id, entity2.id]);\n        equal(dbEntities.length, 2);\n    });\n    it('find', async () => {\n        const entity1 = {\n            id: 'testid',\n            name: 'entity1'\n        };\n        repository.save(entity1);\n        const entity2 = {\n            id: 'testid1',\n            name: 'entity2'\n        };\n        repository.save(entity2);\n        const dbEntities = await repository.find({}, { limit: 2 });\n        equal(dbEntities.length, 2);\n    });\n    it('getDbCollection', () => {\n        const dbCollectionName = BaseRepositoryFake.getDbCollection();\n        equal(dbCollectionName.collectionName, collectionName);\n    });\n});\n//# sourceMappingURL=BaseRepositoryFake.test.js.map"]}