{"version":3,"sources":["../dist-esnext/BaseRepositoryFake.test.js"],"names":["describe","it","collectionName","db","repository","entity","save","entities","dbEntity","getById","id","entity1","entity2","dbEntities","getByIds","length","find","limit","dbCollection","getDbCollection"],"mappings":";;AAAA;;AACA;;AACA;;AACAA,SAAS,oBAAT,EAA+B,YAAM;AACjCC,OAAG,2BAAH,EAAgC,YAAM;AAClC,YAAMC,iBAAiB,MAAvB;AACA,YAAMC,KAAK,EAAX;AACA,YAAMC,aAAa,8BAAuBD,EAAvB,EAA2BD,cAA3B,CAAnB;AACA,8BAAME,WAAWF,cAAjB,EAAiCA,cAAjC,EAAiD,uBAAjD;AACA,8BAAME,WAAWD,EAAjB,EAAqBA,EAArB,EAAyB,UAAzB;AACH,KAND;AAOAF,OAAG,MAAH,EAAW,YAAM;AACb,YAAMG,aAAa,8BAAuB,IAAvB,EAA6B,IAA7B,CAAnB;AACA,YAAMC,SAAS,iCAAkB,EAAlB,CAAf;AACAD,mBAAWE,IAAX,CAAgBD,MAAhB;AACA,8BAAMD,WAAWG,QAAX,CAAoB,CAApB,CAAN,EAA8BF,MAA9B;AACH,KALD;AAMAJ,OAAG,SAAH,EAAc,kBAAY;AACtB,YAAMG,aAAa,8BAAuB,IAAvB,EAA6B,IAA7B,CAAnB;AACA,YAAMC,SAAS,iCAAkB,EAAlB,CAAf;AACAD,mBAAWE,IAAX,CAAgBD,MAAhB;AACA,YAAMG,WAAW,MAAMJ,WAAWK,OAAX,CAAmBJ,OAAOK,EAA1B,CAAvB;AACA,8BAAMF,QAAN,EAAgBH,MAAhB;AACH,KAND;AAOAJ,OAAG,UAAH,EAAe,kBAAY;AACvB,YAAMG,aAAa,8BAAuB,IAAvB,EAA6B,IAA7B,CAAnB;AACA,YAAMO,UAAU,iCAAkB,EAAlB,CAAhB;AACAP,mBAAWE,IAAX,CAAgBK,OAAhB;AACA,YAAMC,UAAU,iCAAkB,EAAlB,CAAhB;AACAR,mBAAWE,IAAX,CAAgBM,OAAhB;AACA,YAAMC,aAAa,MAAMT,WAAWU,QAAX,CAAoB,CAACH,QAAQD,EAAT,EAAaE,QAAQF,EAArB,CAApB,CAAzB;AACA,8BAAMG,WAAWE,MAAjB,EAAyB,CAAzB;AACH,KARD;AASAd,OAAG,MAAH,EAAW,kBAAY;AACnB,YAAMG,aAAa,8BAAuB,IAAvB,EAA6B,IAA7B,CAAnB;AACA,YAAMO,UAAU,iCAAkB,EAAlB,CAAhB;AACAP,mBAAWE,IAAX,CAAgBK,OAAhB;AACA,YAAMC,UAAU,iCAAkB,EAAlB,CAAhB;AACAR,mBAAWE,IAAX,CAAgBM,OAAhB;AACA,YAAMC,aAAa,MAAMT,WAAWY,IAAX,CAAgB,EAAhB,EAAoB,EAAEC,OAAO,CAAT,EAApB,CAAzB;AACA,8BAAMJ,WAAWE,MAAjB,EAAyB,CAAzB;AACH,KARD;AASAd,OAAG,iBAAH,EAAsB,YAAM;AACxB,YAAMG,aAAa,8BAAuB,IAAvB,EAA6B,MAA7B,CAAnB;AACA,YAAMc,eAAed,WAAWe,eAAX,EAArB;AACA,8BAAMD,aAAahB,cAAnB,EAAmC,MAAnC;AACH,KAJD;AAKH,CA5CD;AA6CA","file":"BaseRepositoryFake.test.js","sourcesContent":["import { equal } from 'ptz-assert';\nimport { EntityMinBase } from 'ptz-core-domain';\nimport { BaseRepositoryFake } from './index';\ndescribe('BaseRepositoryFake', () => {\n    it('set collectionName and db', () => {\n        const collectionName = 'test';\n        const db = {};\n        const repository = new BaseRepositoryFake(db, collectionName);\n        equal(repository.collectionName, collectionName, 'wrong collectionsName');\n        equal(repository.db, db, 'wrong db');\n    });\n    it('save', () => {\n        const repository = new BaseRepositoryFake(null, null);\n        const entity = new EntityMinBase({});\n        repository.save(entity);\n        equal(repository.entities[0], entity);\n    });\n    it('getById', async () => {\n        const repository = new BaseRepositoryFake(null, null);\n        const entity = new EntityMinBase({});\n        repository.save(entity);\n        const dbEntity = await repository.getById(entity.id);\n        equal(dbEntity, entity);\n    });\n    it('getByIds', async () => {\n        const repository = new BaseRepositoryFake(null, null);\n        const entity1 = new EntityMinBase({});\n        repository.save(entity1);\n        const entity2 = new EntityMinBase({});\n        repository.save(entity2);\n        const dbEntities = await repository.getByIds([entity1.id, entity2.id]);\n        equal(dbEntities.length, 2);\n    });\n    it('find', async () => {\n        const repository = new BaseRepositoryFake(null, null);\n        const entity1 = new EntityMinBase({});\n        repository.save(entity1);\n        const entity2 = new EntityMinBase({});\n        repository.save(entity2);\n        const dbEntities = await repository.find({}, { limit: 2 });\n        equal(dbEntities.length, 2);\n    });\n    it('getDbCollection', () => {\n        const repository = new BaseRepositoryFake(null, 'test');\n        const dbCollection = repository.getDbCollection();\n        equal(dbCollection.collectionName, 'test');\n    });\n});\n//# sourceMappingURL=BaseRepositoryFake.test.js.map"]}